package org.task;

import java.util.*;

/**
 * This class models a simulation.
 */
public class Simulation {

    private List<Robot> robots;
    private List<Controller> controllers;

    private CommandCenter commandCenter;

    public Simulation(List<Robot> robots, List<Controller> controllers, CommandCenter commandCenter) {
        this.robots = robots;
        this.controllers = controllers;
        this.commandCenter = commandCenter;
    }

    public boolean isRobotActivated(int currentRound, Robot robot) {
        if (currentRound >= robot.getActivationRound() && currentRound <= robot.getDeactivationRound()) {
            robot.setActivated(true);
        } else {
            robot.setActivated(false);
        }
        return robot.isActivated();
    }

    public void printCurrentSituation(int currentRound, int roundPoints, int controllersEffort, int roundRobotsPoints, int activeRobots, int totalPoints) {
        System.out.println("\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n");
        System.out.println("Start Round: " + currentRound);
        System.out.println("Round points: " + roundPoints);
        System.out.println("Controllers effort: " + controllersEffort);
        System.out.println("Round robots points: " + roundRobotsPoints);
        System.out.println("Active robots: " + activeRobots);
        System.out.println("Current Total points: " + totalPoints);
    }

    public void printFinalSituation(int totalPoints) {
        System.out.println("\n##################################################################################\n");
        System.out.println("Final Total points: " + totalPoints);
        System.out.println("\n##################################################################################\n");
    }

    /**
     * This method runs the simulation.
     * Each round, it iterates over the robots and according to their state and workload, it updates the points.
     * For each round, it keeps track of the serial numbers of the unhealthy robots.
     * Also, after iterating the robots,  it checks if there are more than 2 unhealthy robots and calls the command center to repair them.
     *
     * For each round, are printed: the current round, the points generated in the current round, the points consumed by the controllers' effort,
     * the points generated by the active robots for the current round, the number of active robots and the current total points.
     *
     * @param rounds the number of rounds
     */
    public void runSimulation(int rounds) {
        int totalPoints = 0;
        Random random = new Random();
        for (int round = 0; round < rounds; round++) {
            int roundPoints = 0;
            int roundRobotspoints = 0;
            int activeRobots = 0;
            List<Integer> illRobotsIds = new ArrayList<>();

            for (Robot robot : this.robots) {
                boolean robotActivated = this.isRobotActivated(round, robot);
                if (robotActivated) {
                    if (robot.isHealthStatus()) {
                        int robotWorkLoad = robot.generateWorkload(random);
                        if (robotWorkLoad <= 90) {
                            roundPoints += 1;
                            roundRobotspoints += 1;
                        } else {
                            robot.setHealthStatus(false);
                            illRobotsIds.add(robot.getSerialNumber());
                        }
                    } else {
                        roundPoints -= 10;
                        roundRobotspoints -= 10;
                        illRobotsIds.add(robot.getSerialNumber());
                    }
                    activeRobots++;
                }
            }

            int controllersEffort = 0;
            if (illRobotsIds.size() > 2) {
                controllersEffort = this.commandCenter.repairRobots(illRobotsIds);
                roundPoints += controllersEffort;
            }
            totalPoints += roundPoints;
            this.printCurrentSituation(round, roundPoints, controllersEffort, roundRobotspoints, activeRobots, totalPoints);
        }
        this.printFinalSituation(totalPoints);
    }
}
